{"ast":null,"code":"import { API_BASE_URL, Views, User } from \"./constants\";\n/**\n * @desc Gets the existing contract information from database. If none, allow an Omega User create one.\n */\n\nfunction fetchContractInformation() {\n  fetch(`${API_BASE_URL}/contract-information`).then(response => response.json()).then(async data => {\n    // let newView = !data.isContract ? Views.OMEGA_LOG_IN : Views.CONNECT_ACCOUNT\n    let newView = Views.OMEGA_LOG_IN;\n    this.setState({\n      view: newView,\n      user: newView === Views.OMEGA_LOG_IN ? User.OMEGA_USER : User.NORMAL_USER,\n      contract: data.isContract ? data.contract.contract : this.state.contract,\n      contractAddress: data.isContract ? data.contract.address : this.state.contractAddress\n    });\n  }).catch(e => {\n    // If no response is gotten from API service, try connecting again.\n    this.fetchContractInformation();\n  });\n}\n/**\n * @desc This handles the event triggered when an omega user attempts to log in.\n * @param {*} event \n */\n\n\nfunction handleOmegaLogInSubmit(event) {\n  // prevents the refreshing of the page\n  event.preventDefault();\n  let username = this.state.omegaUsername;\n  let password = this.state.omegaPassword;\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  };\n  fetch(`${API_BASE_URL}/admin/log-in`, options).then(response => response.json()).then(data => {\n    if (data.status === 'success') {\n      this.setState({\n        view: Views.CONNECT_ACCOUNT,\n        canLogOut: true,\n        omegaDetailsAreCorrect: true,\n        omegaUsername: '',\n        omegaPassword: ''\n      });\n    } else {\n      this.setState({\n        omegaDetailsAreCorrect: false\n      });\n    }\n  }).catch(e => {\n    this.setState({\n      view: Views.INDEX_VIEW\n    });\n  });\n}\n/**\n * @desc This handles the event triggered when an omega user enters their username or password\n * @param {*} event \n */\n\n\nfunction handleOmegaInputChange(event) {\n  this.setState({\n    [event.target.name]: event.target.value,\n    omegaDetailsAreCorrect: true\n  });\n}\n/**\n * @desc This handles the event triggered when a normal user enters their username or password\n * @param {*} event \n */\n\n\nfunction handleNormalUserInputChange(event) {\n  let numberOfTokens, priceOfTokens;\n\n  if (event.target.name === 'numberOfTokens') {\n    numberOfTokens = event.target.value;\n    priceOfTokens = numberOfTokens === 0 ? 0 : numberOfTokens * this.state.price;\n  }\n\n  if (event.target.name === 'priceOfTokens') {\n    priceOfTokens = event.target.value;\n    numberOfTokens = priceOfTokens === 0 ? 0 : priceOfTokens / this.state.price;\n  }\n\n  if (priceOfTokens > this.state.reach.balanceOf(this.state.account) || numberOfTokens > this.formatCurrency(this.state.supply)) {} else {\n    this.setState({\n      numberOfTokens: numberOfTokens,\n      priceOfTokens: priceOfTokens\n    });\n  }\n}\n/**\n * @desc This triggers a log out of the omega user.\n */\n\n\nfunction handleLogOut() {\n  fetch(`${API_BASE_URL}/admin/log-out`).then(response => response.json()).then(data => {\n    this.setState({\n      view: Views.INDEX_VIEW,\n      canLogOut: false\n    });\n    this.fetchContractInformation();\n  }).catch(e => {\n    this.handleLogOut();\n  });\n}\n/**\n * @desc Connect to crypto account\n */\n\n\nasync function connectDefaultAccount() {\n  try {\n    let acct = await this.state.reach.getDefaultAccount();\n    let currentView = this.state.user === User.OMEGA_USER ? Views.CREATE_CONTRACT : Views.BUY_TOKEN_VIEW;\n    this.setState({\n      account: acct,\n      hasDefaultAccount: true,\n      view: currentView\n    });\n    return true;\n  } catch (error) {\n    this.setState({\n      hasDefaultAccount: false\n    });\n    return false;\n  }\n}\n/**\n * This adds a new account to the application.\n * @param {*} account contract object to be added to application\n * @param {Boolean} connectedWithMnemonic specifies if the account to be added was imorted with the use of a mnemonic key phrase or not.\n */\n\n\nfunction addAccount(account) {\n  let connectedWithMnemonic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let currentView = this.state.user === User.OMEGA_USER ? Views.CREATE_CONTRACT : Views.BUY_TOKEN_VIEW;\n  this.setState({\n    account: account,\n    view: currentView,\n    connectedWithMnemonic: connectedWithMnemonic\n  });\n}\n\nasync function createContract() {\n  const interact = this.createParticipantInteractInterface();\n  /**\n   * @description displays amount of non-network tokens paid for by user and amount of network tokens it cost\n   * @param name Name of User that paid to contract\n   * @param amount Amount of tokens paid to contract \n   * @param price Price of non-network token\n   */\n\n  interact.paidBy = (name, amount, price, address) => {\n    console.log(`${name} of address: ${address} paid for ${amount} non-network tokens with ${this.formatCurrency(amount * price)} network tokens. `);\n  };\n\n  console.log('Creating new contract...');\n  const contract = this.state.account.deploy(this.state.backend);\n  console.log('Contract created successfully');\n  console.log(contract);\n  console.log('Communicating with back end...');\n  this.setState({\n    isLoading: true\n  });\n  contract.getInfo().then(info => {\n    this.setState({\n      contractAddress: JSON.stringify(info),\n      contract: contract\n    });\n    let obj = {\n      contract: JSON.stringify(contract),\n      address: JSON.stringify(info)\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(obj)\n    };\n    console.log(options);\n    fetch(`${API_BASE_URL}/contract-information`, options).then(response => response.json()).then(data => {\n      console.log(data);\n    }).catch(err => {\n      console.log(err);\n    });\n  });\n\n  try {\n    await this.state.backend.OmegaUser(contract, interact); // const contractAddress = await contract.getInfo()\n    // console.log(contractAddress)\n    // this.setState({contractAddress: contractAddress})\n  } catch (e) {\n    console.error(e);\n    alert(\"Insufficied tokens in wallet to create contract\");\n  }\n}\n\nfunction createParticipantInteractInterface() {\n  let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  const interact = { ...this.state.reach.hasRandom\n  };\n  interact.name = name === \"\" ? \"Omega User\" : name;\n\n  interact.acceptToken = async token => {\n    console.log('..........INTERACT.ACCEPTTOKEN..........');\n    const tokenID = this.state.reach.bigNumberToNumber(token);\n    this.setState({\n      token: token\n    });\n    await this.state.account.tokenAccept(tokenID);\n    console.log('Token Accepted successfully');\n    console.log('....................');\n  };\n  /**\n   * @description displays network token balance and non-network token balance\n   * @param tok Token datatype \n   */\n\n\n  interact.showBalance = async tok => {\n    console.log('..........INTERACT.SHOWBALANCE..........');\n    console.log(`Your balance is ${this.formatCurrency(await this.state.reach.balanceOf(this.state.account))} network tokens and ${this.formatCurrency(this.state.reach.parseCurrency(await this.state.reach.balanceOf(this.state.account, tok)))} non-network tokens`);\n    console.log('....................');\n  };\n  /**\n   * @description Displays details of the token on the console\n   * @param supply amount of non-network token available in the contract\n   * @param price price of one non-network token with respect to network token\n   */\n\n\n  interact.displayTokenDetails = (supply, price) => {\n    console.log(`..........INTERACT.DISPLAYTOKENDETAILS..........`);\n    console.log(`Amount of tokens remaining: ${supply} \\nPrice of Token: ${this.formatCurrency(price)}`);\n    console.log('....................');\n    this.setState({\n      supply: supply,\n      price: this.formatCurrency(price)\n    });\n  };\n\n  return interact;\n}\n/**\n * @desc Connect to contract with account of normal user.\n */\n\n\nasync function connectToContract() {\n  const contractAddress = this.state.contractAddress;\n  console.log(`contract address to connect to: ${contractAddress}`);\n  const account = this.state.account;\n  console.log(account);\n  console.log(`account we are to connect to contract with: ${account.getAddress()}`);\n  const balanceObject = await this.state.reach.balanceOf(account);\n  const balance = this.formatCurrency(balanceObject);\n  console.log(balance);\n\n  if (balance == 0) {\n    alert('Your ALG balance is insufficient to interact with this contract. Please fund your account and try again.');\n    this.setState({\n      view: Views.CONNECT_ACCOUNT\n    });\n    return;\n  }\n\n  console.log(`Connecting to contract`);\n  const contract = account.contract(this.state.backend, JSON.parse(contractAddress));\n  console.log(`Connected successfully.`);\n  console.log(`Waiting for response from backend`);\n  const interact = this.createParticipantInteractInterface();\n  /**\n   * @description Asks user if they want to buy a no-network token, then asks for how much of it they want\n   * @returns Number of non-network tokens user wants to buy\n   */\n\n  interact.buyToken = async (supply, tokenPrice) => {\n    const price = this.formatCurrency(tokenPrice);\n    this.setState({\n      price: price,\n      supply: supply\n    });\n    console.log(\"....INTERACT.BUYTOKEN......\");\n    console.log(\"Waiting for User response to proceed\");\n    let numberOfToks = await this.getUserResponse();\n    numberOfToks = this.state.reach.parseCurrency(numberOfToks);\n    console.log(\"User response gotten\");\n    console.log(`Number of tokens user wants to buy: ${numberOfToks}`);\n    console.log('...............');\n    return [numberOfToks, this.state.account.networkAccount]; // while (true) {\n    //   numberOfToks = willBuy ? await ask(`How many non-network tokens would you like to buy?`, x => fmt(stdlib.parseCurrency(x))) : 0\n    //   if (numberOfToks * price > balance) {\n    //     console.log(`You do not have enough tokens for this transaction. Please don't try to bite more than you can chew`)\n    //     continue\n    //   } else {\n    //     if (numberOfToks > supply) {\n    //       console.log(`You're asking for more tokens than are available. Check the amount of tokens then adjust your demand`)\n    //       continue\n    //     } else {\n    //       break\n    //     }\n    //   }\n    // }\n  };\n\n  interact.giveFeedBack1 = () => {\n    console.log('.......INTERACT.GIVEFEEDBACK.ONE.........');\n    console.log(`pinging.`);\n    console.log('.................................');\n  };\n\n  interact.giveFeedBack2 = () => {\n    console.log('.......INTERACT.GIVEFEEDBACK.TWO..........');\n    console.log(`Ping ping.`);\n    console.log('...................................................');\n  };\n\n  interact.giveFeedBack3 = () => {\n    console.log('.......INTERACT.GIVEFEEDBACK.THREE..........');\n    console.log(`ping ping ping ping.`);\n    console.log('.....................................................');\n  };\n\n  interact.giveFeedBack4 = () => {\n    console.log('.......INTERACT.GIVEFEEDBACK.FOUR.........');\n    console.log(`ping!!!!!!!!!!!!!!!.`);\n    console.log('.................................');\n  };\n\n  this.state.backend.NormalUser(contract, interact);\n}\n\nfunction buyToken(event) {\n  event.preventDefault();\n\n  if (this.state.numberOfTokens > this.state.supply) {\n    alert(`You're asking for more tokens than are available. Check the amount of tokens then adjust your demand`);\n  } else if (this.state.priceOfTokens > this.state.reach.balanceOf(this.state.account)) {\n    alert(`You do not have enough tokens for this transaction. Please don't try to bite more than you can chew`);\n  } else {\n    this.resolved(this.state.numberOfTokens);\n  }\n}\n/**\n * @description Formats the currency amount to 4 decimal places.\n * @param amount Amount of currency to be formatted.\n * @returns Formatted number.\n */\n\n\nfunction formatCurrency(amount) {\n  return this.state.reach.formatCurrency(amount, 8);\n}\n\nexport { fetchContractInformation, handleOmegaInputChange, handleOmegaLogInSubmit, handleLogOut, connectDefaultAccount, addAccount, createContract, createParticipantInteractInterface, formatCurrency, connectToContract, handleNormalUserInputChange, buyToken };","map":{"version":3,"sources":["/home/paradoxfly/reach/bonding-curve-sale/src/utils/functions.js"],"names":["API_BASE_URL","Views","User","fetchContractInformation","fetch","then","response","json","data","newView","OMEGA_LOG_IN","setState","view","user","OMEGA_USER","NORMAL_USER","contract","isContract","state","contractAddress","address","catch","e","handleOmegaLogInSubmit","event","preventDefault","username","omegaUsername","password","omegaPassword","options","method","headers","body","JSON","stringify","status","CONNECT_ACCOUNT","canLogOut","omegaDetailsAreCorrect","INDEX_VIEW","handleOmegaInputChange","target","name","value","handleNormalUserInputChange","numberOfTokens","priceOfTokens","price","reach","balanceOf","account","formatCurrency","supply","handleLogOut","connectDefaultAccount","acct","getDefaultAccount","currentView","CREATE_CONTRACT","BUY_TOKEN_VIEW","hasDefaultAccount","error","addAccount","connectedWithMnemonic","createContract","interact","createParticipantInteractInterface","paidBy","amount","console","log","deploy","backend","isLoading","getInfo","info","obj","err","OmegaUser","alert","hasRandom","acceptToken","token","tokenID","bigNumberToNumber","tokenAccept","showBalance","tok","parseCurrency","displayTokenDetails","connectToContract","getAddress","balanceObject","balance","parse","buyToken","tokenPrice","numberOfToks","getUserResponse","networkAccount","giveFeedBack1","giveFeedBack2","giveFeedBack3","giveFeedBack4","NormalUser","resolved"],"mappings":"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","sourcesContent":["import { API_BASE_URL, Views, User } from \"./constants\";\n\n/**\n * @desc Gets the existing contract information from database. If none, allow an Omega User create one.\n */\nfunction fetchContractInformation() {\n  fetch(`${API_BASE_URL}/contract-information`)\n    .then(response => response.json())\n    .then(async data => {\n      // let newView = !data.isContract ? Views.OMEGA_LOG_IN : Views.CONNECT_ACCOUNT\n      let newView = Views.OMEGA_LOG_IN\n      \n      this.setState({ \n        view: newView, \n        user: newView === Views.OMEGA_LOG_IN? User.OMEGA_USER : User.NORMAL_USER,\n        contract: data.isContract? data.contract.contract : this.state.contract,\n        contractAddress: data.isContract? data.contract.address : this.state.contractAddress\n      })\n    })\n    .catch(e => {\n      // If no response is gotten from API service, try connecting again.\n      this.fetchContractInformation()\n    })\n}\n\n/**\n * @desc This handles the event triggered when an omega user attempts to log in.\n * @param {*} event \n */\nfunction handleOmegaLogInSubmit(event) {\n  // prevents the refreshing of the page\n  event.preventDefault();\n\n  let username = this.state.omegaUsername;\n  let password = this.state.omegaPassword;\n\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    body: JSON.stringify({ username, password }),\n  }\n\n  fetch(`${API_BASE_URL}/admin/log-in`, options)\n    .then(response => response.json())\n    .then(data => {\n      if (data.status === 'success') {\n        this.setState({ view: Views.CONNECT_ACCOUNT, canLogOut: true, omegaDetailsAreCorrect: true, omegaUsername: '', omegaPassword: '' })\n      } else {\n        this.setState({ omegaDetailsAreCorrect: false })\n      }\n    })\n    .catch(e => {\n      this.setState({ view: Views.INDEX_VIEW })\n    })\n}\n\n/**\n * @desc This handles the event triggered when an omega user enters their username or password\n * @param {*} event \n */\nfunction handleOmegaInputChange(event) {\n  this.setState({ [event.target.name]: event.target.value, omegaDetailsAreCorrect: true })\n}\n\n/**\n * @desc This handles the event triggered when a normal user enters their username or password\n * @param {*} event \n */\n function handleNormalUserInputChange(event) {\n   let numberOfTokens, priceOfTokens\n   if(event.target.name === 'numberOfTokens') {\n      numberOfTokens = event.target.value;\n      priceOfTokens = numberOfTokens === 0? 0 : numberOfTokens * this.state.price\n   }\n\n   if (event.target.name === 'priceOfTokens') {\n      priceOfTokens = event.target.value;\n      numberOfTokens = priceOfTokens === 0 ? 0 : priceOfTokens / this.state.price\n   }\n\n   if(priceOfTokens > this.state.reach.balanceOf(this.state.account)  || numberOfTokens > this.formatCurrency(this.state.supply)){} \n   else {\n    this.setState({ numberOfTokens: numberOfTokens, priceOfTokens: priceOfTokens })\n   }\n  \n}\n\n/**\n * @desc This triggers a log out of the omega user.\n */\nfunction handleLogOut() {\n  fetch(`${API_BASE_URL}/admin/log-out`)\n    .then(response => response.json())\n    .then(data => {\n      this.setState({ view: Views.INDEX_VIEW, canLogOut: false })\n      this.fetchContractInformation()\n    }).catch(e => {\n      this.handleLogOut()\n    })\n}\n\n/**\n * @desc Connect to crypto account\n */\nasync function connectDefaultAccount() {\n  try {\n    let acct = await this.state.reach.getDefaultAccount();\n    let currentView = this.state.user === User.OMEGA_USER? Views.CREATE_CONTRACT : Views.BUY_TOKEN_VIEW;\n    this.setState({ account: acct, hasDefaultAccount: true, view: currentView});\n    return true\n  }\n  catch (error) {\n    this.setState({ hasDefaultAccount: false })\n    return false\n  }\n\n}\n\n/**\n * This adds a new account to the application.\n * @param {*} account contract object to be added to application\n * @param {Boolean} connectedWithMnemonic specifies if the account to be added was imorted with the use of a mnemonic key phrase or not.\n */\nfunction addAccount(account, connectedWithMnemonic=false) {\n  \n  let currentView = this.state.user === User.OMEGA_USER? Views.CREATE_CONTRACT : Views.BUY_TOKEN_VIEW;\n\n  this.setState({ account: account, view: currentView, connectedWithMnemonic: connectedWithMnemonic })\n}\n\nasync function createContract() {\n  const interact = this.createParticipantInteractInterface();\n\n  /**\n   * @description displays amount of non-network tokens paid for by user and amount of network tokens it cost\n   * @param name Name of User that paid to contract\n   * @param amount Amount of tokens paid to contract \n   * @param price Price of non-network token\n   */\n  interact.paidBy = (name, amount, price, address) => {\n    console.log(`${name} of address: ${address} paid for ${amount} non-network tokens with ${this.formatCurrency(amount * price)} network tokens. `)\n  }\n\n  console.log('Creating new contract...')\n  const contract = this.state.account.deploy(this.state.backend);\n  console.log('Contract created successfully')\n  console.log(contract)\n  console.log('Communicating with back end...')\n\n  this.setState({isLoading: true })\n\n  contract.getInfo().then(info => {\n    this.setState({contractAddress: JSON.stringify(info), contract: contract, })\n\n    let obj = {\n      contract: JSON.stringify(contract),\n      address: JSON.stringify(info)\n    }\n\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(obj)\n    }\n\n    console.log(options)\n\n    fetch(`${API_BASE_URL}/contract-information`, options)\n    .then(response => response.json())\n    .then(data => {\n      console.log(data)\n    })\n    .catch(err => {\n      console.log(err)\n    })\n  })\n  \n  \n  try {\n    \n    await this.state.backend.OmegaUser(contract, interact)\n    // const contractAddress = await contract.getInfo()\n    // console.log(contractAddress)\n    // this.setState({contractAddress: contractAddress})\n  }\n  catch(e) {\n    console.error(e)\n    alert(\"Insufficied tokens in wallet to create contract\")\n  }\n}\n\nfunction createParticipantInteractInterface(name = \"\") {\n  const interact = { ...this.state.reach.hasRandom };\n  interact.name = name === \"\" ? \"Omega User\" : name;\n\n  interact.acceptToken = async (token) => {\n    console.log('..........INTERACT.ACCEPTTOKEN..........')\n    const tokenID = this.state.reach.bigNumberToNumber(token)\n    this.setState({token: token})\n    await this.state.account.tokenAccept(tokenID)\n    console.log('Token Accepted successfully')\n    console.log('....................')\n  }\n\n  /**\n   * @description displays network token balance and non-network token balance\n   * @param tok Token datatype \n   */\n  interact.showBalance = async (tok) => {\n    console.log('..........INTERACT.SHOWBALANCE..........')\n    console.log(`Your balance is ${this.formatCurrency(await this.state.reach.balanceOf(this.state.account))} network tokens and ${this.formatCurrency(this.state.reach.parseCurrency(await this.state.reach.balanceOf(this.state.account, tok)))} non-network tokens`);\n    console.log('....................')\n  }\n\n  /**\n   * @description Displays details of the token on the console\n   * @param supply amount of non-network token available in the contract\n   * @param price price of one non-network token with respect to network token\n   */\n  interact.displayTokenDetails = (supply, price) => {\n    \n    console.log(`..........INTERACT.DISPLAYTOKENDETAILS..........`)\n    console.log(`Amount of tokens remaining: ${supply} \\nPrice of Token: ${this.formatCurrency(price)}`)\n    console.log('....................')\n    this.setState({supply: supply, price: (this.formatCurrency(price))})\n  }\n\n  return interact\n}\n\n/**\n * @desc Connect to contract with account of normal user.\n */\nasync function connectToContract() {\n  const contractAddress = this.state.contractAddress\n  console.log(`contract address to connect to: ${contractAddress}`)\n\n  const account = this.state.account\n  console.log(account)\n  console.log(`account we are to connect to contract with: ${account.getAddress()}`)\n\n  const balanceObject = await this.state.reach.balanceOf(account)\n\n  const balance = this.formatCurrency(balanceObject)\n\n  console.log(balance)\n\n  if (balance == 0) {\n    alert('Your ALG balance is insufficient to interact with this contract. Please fund your account and try again.')\n    this.setState({view: Views.CONNECT_ACCOUNT})\n    return\n  } \n\n  console.log(`Connecting to contract`)\n  const contract = account.contract(this.state.backend, JSON.parse(contractAddress))\n  console.log(`Connected successfully.`)\n  console.log(`Waiting for response from backend`)\n\n  const interact = this.createParticipantInteractInterface();\n\n  /**\n   * @description Asks user if they want to buy a no-network token, then asks for how much of it they want\n   * @returns Number of non-network tokens user wants to buy\n   */\n  interact.buyToken = async (supply, tokenPrice) => {\n    const price = this.formatCurrency(tokenPrice)\n\n    this.setState({price: price, supply: supply})\n\n    console.log(\"....INTERACT.BUYTOKEN......\")\n    console.log(\"Waiting for User response to proceed\")\n    let numberOfToks = await this.getUserResponse()\n    numberOfToks = this.state.reach.parseCurrency(numberOfToks)\n    console.log(\"User response gotten\")\n    console.log(`Number of tokens user wants to buy: ${numberOfToks}`)\n    console.log('...............')\n    return [(numberOfToks), this.state.account.networkAccount]\n\n    // while (true) {\n    //   numberOfToks = willBuy ? await ask(`How many non-network tokens would you like to buy?`, x => fmt(stdlib.parseCurrency(x))) : 0\n    //   if (numberOfToks * price > balance) {\n    //     console.log(`You do not have enough tokens for this transaction. Please don't try to bite more than you can chew`)\n    //     continue\n    //   } else {\n    //     if (numberOfToks > supply) {\n    //       console.log(`You're asking for more tokens than are available. Check the amount of tokens then adjust your demand`)\n    //       continue\n    //     } else {\n          \n    //       break\n    //     }\n    //   }\n    // }\n  }\n\n  interact.giveFeedBack1 = () => {\n    console.log('.......INTERACT.GIVEFEEDBACK.ONE.........')\n    console.log(`pinging.`)\n    console.log('.................................')\n  }\n\n  interact.giveFeedBack2 = () => {\n    console.log('.......INTERACT.GIVEFEEDBACK.TWO..........')\n    console.log(`Ping ping.`)\n    console.log('...................................................')\n  }\n\n  interact.giveFeedBack3 = () => {\n    console.log('.......INTERACT.GIVEFEEDBACK.THREE..........')\n    console.log(`ping ping ping ping.`)\n    console.log('.....................................................')\n  }\n\n  interact.giveFeedBack4 = () => {\n    console.log('.......INTERACT.GIVEFEEDBACK.FOUR.........')\n    console.log(`ping!!!!!!!!!!!!!!!.`)\n    console.log('.................................')\n  }\n\n  this.state.backend.NormalUser(contract, interact)\n}\n\nfunction buyToken(event) {\n  event.preventDefault()\n\n  if(this.state.numberOfTokens > this.state.supply){\n    alert(`You're asking for more tokens than are available. Check the amount of tokens then adjust your demand`)\n  }\n  else if (this.state.priceOfTokens > this.state.reach.balanceOf(this.state.account)) {\n    alert(`You do not have enough tokens for this transaction. Please don't try to bite more than you can chew`)\n  }\n  else {\n    this.resolved(this.state.numberOfTokens)\n  }\n}\n\n/**\n * @description Formats the currency amount to 4 decimal places.\n * @param amount Amount of currency to be formatted.\n * @returns Formatted number.\n */\n function formatCurrency(amount) {\n  return this.state.reach.formatCurrency(amount, 8);\n}\n\nexport {\n  fetchContractInformation,\n  handleOmegaInputChange,\n  handleOmegaLogInSubmit,\n  handleLogOut,\n  connectDefaultAccount,\n  addAccount,\n  createContract,\n  createParticipantInteractInterface,\n  formatCurrency,\n  connectToContract,\n  handleNormalUserInputChange,\n  buyToken\n}\n\n"]},"metadata":{},"sourceType":"module"}