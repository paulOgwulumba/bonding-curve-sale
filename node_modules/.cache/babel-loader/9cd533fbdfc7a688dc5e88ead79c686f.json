{"ast":null,"code":"import { loadStdlib } from '@reach-sh/stdlib';\nimport * as backend from './build/index.main.mjs';\nimport { ask, yesno, done } from '@reach-sh/stdlib/ask.mjs';\nconst stdlib = loadStdlib(process.env);\n\n(async () => {\n  /**\n   * @description Starting balance of user (Strictly for testing purposes).\n   */\n  const startingBalance = stdlib.parseCurrency(100);\n  /**\n   * @description Name of the current user.\n   */\n\n  const nameOfUser = await ask('What is your name?', x => x);\n  /**\n   * @description Account of user. It is initiated to have the 'startingBalance'\n   */\n\n  const accUser = await stdlib.newTestAccount(startingBalance); // prompt user if they want to create new token or buy one that exists\n  // an omega user is one that creates a new token\n\n  /**\n   * @description Holds true if current user is an Omega User.\n   */\n\n  const isOmegaUser = await ask(`Hello ${nameOfUser}, would you like to create a new contract?`, yesno);\n  console.log('Launching...');\n  /**\n   * @description Contract instance for the dapp.\n   */\n\n  let contract = null;\n  let tokenPrice = null;\n\n  const fmt = x => stdlib.formatCurrency(x, 8); // if user is an omega user, create a new contract, else attach to already existing contract using contract info\n\n\n  if (isOmegaUser) {\n    contract = accUser.contract(backend);\n    console.log(`Contract is launching...`); // display contract information\n\n    contract.getInfo().then(info => {\n      console.log(`The contract address is ${JSON.stringify(info)}`);\n    });\n  } else {\n    const info = await ask(`Please paste the contract information:`, JSON.parse);\n    contract = accUser.contract(backend, info);\n    console.log(`Connecting to contract...`);\n  }\n\n  const interact = { ...stdlib.hasRandom\n  }; //Define interact information for both principals\n\n  interact.name = nameOfUser;\n\n  if (isOmegaUser) {\n    /**\n     * @description displays amount of non-network tokens paid for by user and amount of network tokens it cost\n     * @param name Name of User that paid to contract\n     * @param amount Amount of tokens paid to contract \n     * @param price Price of non-network token\n     */\n    interact.paidBy = (name, amount, price, address) => {\n      console.log(`${name} of address: ${address} paid for ${amount} non-network tokens with ${fmt(amount * price)} network tokens. `);\n    };\n    /**\n     * @description Loggers for the backend\n     * \n     */\n\n\n    interact.logString = value => {\n      console.log(`String log: ${value}`);\n    };\n\n    interact.logInt = value => {\n      console.log(`Integer log: ${value}`);\n    };\n\n    interact.logBool = value => {\n      console.log(`Boolean log: ${value}`);\n    };\n  } else {\n    /**\n     * @description Asks user if they want to buy a no-network token, then asks for how much of it they want\n     * @returns Number of non-network tokens user wants to buy\n     */\n    interact.buyToken = async (supply, tokenPrice) => {\n      const willBuy = await ask(`Would you like to buy non-network tokens? (Y/n)`, yesno);\n      var numberOfToks = null;\n      const balance = formatCurrency(await stdlib.balanceOf(accUser));\n      const price = formatCurrency(tokenPrice);\n\n      while (true) {\n        numberOfToks = willBuy ? await ask(`How many non-network tokens would you like to buy?`, x => fmt(stdlib.parseCurrency(x))) : 0;\n\n        if (numberOfToks * price > balance) {\n          console.log(`You do not have enough tokens for this transaction. Please don't try to bite more than you can chew`);\n          continue;\n        } else {\n          if (numberOfToks > supply) {\n            console.log(`You're asking for more tokens than are available. Check the amount of tokens then adjust your demand`);\n            continue;\n          } else {\n            return [numberOfToks, accUser.networkAccount];\n            break;\n          }\n        }\n      }\n    };\n\n    interact.giveFeedBack1 = () => {\n      console.log('Feedback1');\n    };\n\n    interact.giveFeedBack2 = () => {\n      console.log('Feedback1');\n    };\n\n    interact.giveFeedBack3 = () => {\n      console.log('Feedback1');\n    };\n\n    interact.giveFeedBack4 = () => {\n      console.log('Feedback1');\n    };\n  }\n\n  interact.acceptToken = async token => {\n    const tokenID = stdlib.bigNumberToNumber(token);\n    await accUser.tokenAccept(tokenID);\n  };\n  /**\n   * @description Displays details of the token on the console\n   * @param supply amount of non-network token available in the contract\n   * @param price price of one non-network token with respect to network token\n   */\n\n\n  interact.displayTokenDetails = (supply, price) => {\n    console.log(`Amount of tokens remaining: ${supply} \\nPrice of Token: ${formatCurrency(price)}`);\n  };\n  /**\n   * @description displays network token balance and non-network token balance\n   * @param tok Token datatype \n   */\n\n\n  interact.showBalance = async tok => {\n    // console.log(`Your balance is ${formatCurrency(await stdlib.balanceOf(accUser))} network tokens and ${formatCurrency(await stdlib.balanceOf(accUser, tok))} non-network tokens`);\n    console.log(`Your balance is ${formatCurrency(await stdlib.balanceOf(accUser))} network tokens and ${formatCurrency(stdlib.parseCurrency(await stdlib.balanceOf(accUser, tok)))} non-network tokens`);\n  };\n\n  const part = isOmegaUser ? backend.OmegaUser : backend.NormalUser;\n  await part(contract, interact);\n  console.log('Goodbye');\n})();\n/**\n * @description Formats the currency amount to 4 decimal places.\n * @param amount Amount of currency to be formatted.\n * @returns Formatted number.\n */\n\n\nfunction formatCurrency(amount) {\n  return stdlib.formatCurrency(amount, 8);\n}","map":{"version":3,"sources":["/home/paradoxfly/reach/bonding-curve-sale/src/index.mjs"],"names":["loadStdlib","backend","ask","yesno","done","stdlib","process","env","startingBalance","parseCurrency","nameOfUser","x","accUser","newTestAccount","isOmegaUser","console","log","contract","tokenPrice","fmt","formatCurrency","getInfo","then","info","JSON","stringify","parse","interact","hasRandom","name","paidBy","amount","price","address","logString","value","logInt","logBool","buyToken","supply","willBuy","numberOfToks","balance","balanceOf","networkAccount","giveFeedBack1","giveFeedBack2","giveFeedBack3","giveFeedBack4","acceptToken","token","tokenID","bigNumberToNumber","tokenAccept","displayTokenDetails","showBalance","tok","part","OmegaUser","NormalUser"],"mappings":"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","sourcesContent":["import { loadStdlib } from '@reach-sh/stdlib';\nimport * as backend from './build/index.main.mjs';\nimport { ask, yesno, done } from '@reach-sh/stdlib/ask.mjs';\n\nconst stdlib = loadStdlib(process.env);\n\n(async () => {\n  /**\n   * @description Starting balance of user (Strictly for testing purposes).\n   */\n  const startingBalance = stdlib.parseCurrency(100);\n\n  /**\n   * @description Name of the current user.\n   */\n  const nameOfUser = await ask('What is your name?', x => x);\n\n  /**\n   * @description Account of user. It is initiated to have the 'startingBalance'\n   */\n  const accUser = await stdlib.newTestAccount(startingBalance);\n\n  // prompt user if they want to create new token or buy one that exists\n  // an omega user is one that creates a new token\n  /**\n   * @description Holds true if current user is an Omega User.\n   */\n  const isOmegaUser = await ask(\n    `Hello ${nameOfUser}, would you like to create a new contract?`,\n    yesno\n  );\n\n  console.log('Launching...');\n\n  /**\n   * @description Contract instance for the dapp.\n   */\n  let contract = null;\n  let tokenPrice = null;\n\n  const fmt = (x) => stdlib.formatCurrency(x, 8);\n\n  // if user is an omega user, create a new contract, else attach to already existing contract using contract info\n  if (isOmegaUser) {\n    contract = accUser.contract(backend);\n    console.log(`Contract is launching...`);\n\n    // display contract information\n    contract.getInfo().then((info) => {\n      console.log(`The contract address is ${JSON.stringify(info)}`);\n    });\n  }\n  else {\n    const info = await ask(\n      `Please paste the contract information:`,\n      JSON.parse\n    );\n    contract = accUser.contract(backend, info);\n    console.log(`Connecting to contract...`);\n  }\n\n  const interact = { ...stdlib.hasRandom };\n\n  //Define interact information for both principals\n  interact.name = nameOfUser\n  if (isOmegaUser) {\n    /**\n     * @description displays amount of non-network tokens paid for by user and amount of network tokens it cost\n     * @param name Name of User that paid to contract\n     * @param amount Amount of tokens paid to contract \n     * @param price Price of non-network token\n     */\n    interact.paidBy = (name, amount, price, address) => {\n      console.log(`${name} of address: ${address} paid for ${amount} non-network tokens with ${fmt(amount * price)} network tokens. `)\n    }\n\n    /**\n     * @description Loggers for the backend\n     * \n     */\n    interact.logString = (value) => {\n      console.log(`String log: ${value}`)\n    }\n    interact.logInt = (value) => {\n      console.log(`Integer log: ${value}`)\n    }\n    interact.logBool = (value) => {\n      console.log(`Boolean log: ${value}`)\n    }\n  } else {\n\n    /**\n     * @description Asks user if they want to buy a no-network token, then asks for how much of it they want\n     * @returns Number of non-network tokens user wants to buy\n     */\n    interact.buyToken = async (supply, tokenPrice) => {\n      const willBuy = await ask(`Would you like to buy non-network tokens? (Y/n)`, yesno)\n      var numberOfToks = null\n      const balance = formatCurrency(await stdlib.balanceOf(accUser))\n      const price = formatCurrency(tokenPrice)\n      while (true) {\n        numberOfToks = willBuy ? await ask(`How many non-network tokens would you like to buy?`, x => fmt(stdlib.parseCurrency(x))) : 0\n        if (numberOfToks * price > balance) {\n          console.log(`You do not have enough tokens for this transaction. Please don't try to bite more than you can chew`)\n          continue\n        } else {\n          if (numberOfToks > supply) {\n            console.log(`You're asking for more tokens than are available. Check the amount of tokens then adjust your demand`)\n            continue\n          } else {\n            return [(numberOfToks), accUser.networkAccount]\n            break\n          }\n        }\n      }\n    }\n    interact.giveFeedBack1 = () => {\n      console.log('Feedback1')\n    }\n    interact.giveFeedBack2 = () => {\n      console.log('Feedback1')\n    }\n    interact.giveFeedBack3 = () => {\n      console.log('Feedback1')\n    }\n    interact.giveFeedBack4 = () => {\n      console.log('Feedback1')\n    }\n  }\n\n  interact.acceptToken = async (token) => {\n    const tokenID = stdlib.bigNumberToNumber(token)\n    await accUser.tokenAccept(tokenID)\n  }\n\n  /**\n   * @description Displays details of the token on the console\n   * @param supply amount of non-network token available in the contract\n   * @param price price of one non-network token with respect to network token\n   */\n  interact.displayTokenDetails = (supply, price) => {\n    console.log(`Amount of tokens remaining: ${supply} \\nPrice of Token: ${formatCurrency(price)}`)\n  }\n\n  /**\n   * @description displays network token balance and non-network token balance\n   * @param tok Token datatype \n   */\n  interact.showBalance = async (tok) => {\n    // console.log(`Your balance is ${formatCurrency(await stdlib.balanceOf(accUser))} network tokens and ${formatCurrency(await stdlib.balanceOf(accUser, tok))} non-network tokens`);\n    console.log(`Your balance is ${formatCurrency(await stdlib.balanceOf(accUser))} network tokens and ${formatCurrency(stdlib.parseCurrency(await stdlib.balanceOf(accUser, tok)))} non-network tokens`);\n  }\n\n  const part = isOmegaUser ? backend.OmegaUser : backend.NormalUser;\n  await part(contract, interact);\n\n  console.log('Goodbye');\n})();\n\n/**\n * @description Formats the currency amount to 4 decimal places.\n * @param amount Amount of currency to be formatted.\n * @returns Formatted number.\n */\nfunction formatCurrency(amount) {\n  return stdlib.formatCurrency(amount, 8);\n}"]},"metadata":{},"sourceType":"module"}